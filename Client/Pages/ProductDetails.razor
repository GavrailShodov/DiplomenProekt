@page "/product/{id:int}"
@using WebAplicationForServices.Client.Services.OrdersService
@inject IProductService productService;
@inject IOrderService orderService;

@if(product==null)
{
    <span>@message</span>
}
else
{
    <div class="media">
        <div class="media-img-wrapper mr-2">
            <img class="media-img" src="@product.ImageUrl" alt="@product.Title"/>
        </div>
        <div class="media-body">
            <h2 class="mb-0">
                @product.Title
            </h2>
            <p>
                @product.Description
            </p>
            <h4 class="price">
                @product.Price lv
            </h4>

        </div>
        <div class="order">
            <EditForm Model="order" OnValidSubmit="CreateOrder">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <div class="mb-0">
            <label for="name">Your name</label>
            <InputText id="name" @bind-Value="order.Name" class="form-control"></InputText>
        </div>
        <div class="mb-0">
            <label for="email">Email</label>
            <InputText id="email" @bind-Value="order.Email" class="form-control"></InputText>
        </div>
        <div class="mb-0">
            <label for="phone">Phone</label>
            <InputTextArea id="phone" @bind-Value="order.Phone" class="form-control"></InputTextArea>
       </div>
       <div class="mb-0">
       <label for="imageUrl">Price</label>
       <InputNumber @bind-Value="product.Price" class="form-control" ></InputNumber>
        </div>
    <button type="submit" class="btn btn-primary float-end">Reserve</button>
    <ValidationSummary></ValidationSummary>
</EditForm>

        </div>
    </div>
}


@code {
    private Order order = new Order();
    private Product? product = null;
    private string message = string.Empty;
    [Parameter]
    public int Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        message = "Loading Product ...";
        var result = await productService.GetProductAsync(Id);
        if(!result.Success)
        {
            message = result.Message;
        }
        else
        {
            product = result.Data;
        }
    }

    private async void CreateOrder()
    {
        order.ProductId = Id;
        await orderService.CreateOrderAsync(order);
    }
}
