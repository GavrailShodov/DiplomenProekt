@page "/login"
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Login</PageTitle>

<EditForm Model="user" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator/>
    <div class="mb-3">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="user.Email" class="form-control"></InputText>
        <ValidationMessage For ="@(() =>user.Email)"/>
    </div>
    <div class="mb-3">
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="user.Password" class="form-control" type="password"></InputText>
         <ValidationMessage For ="@(() =>user.Password)"/>
    </div>
    
    <button type="submit" class="btn btn-primary">Login</button>
 
</EditForm>

<div class="text-danger">
    @errorMessage
</div>


@code {
    UserLogin user = new UserLogin();

    private string errorMessage { get; set; } = string.Empty;

    private async Task HandleLogin()
    {
        var result = await AuthService.Login(user);
        if(result.Success)
        {
            errorMessage = string.Empty;
            await LocalStorage.SetItemAsync("authToken", result.Data);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();

            NavigationManager.NavigateTo("");
        }
        else
        {
            errorMessage = result.Message;
        }

    }
}
